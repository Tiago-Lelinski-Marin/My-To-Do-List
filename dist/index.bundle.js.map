{"version":3,"file":"index.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACoC;AACU;AACS;AACO;AAClB;AACE;AACJ;AACQ;AACD;;AAEjD;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,wDAAG;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAQ;AAChB;AACA,KAAK;AACL;AACA,CAAC;;AAED;;AAEA;AACA,wDAAwD;AACxD;AACA;AACA,IAAI,+DAAU;AACd,IAAI,8DAAS;AACb,IAAI,+DAAU;AACd;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAY;AAChB;AACA,CAAC;;AAED;AACA;AACA,oBAAoB,4EAAM;AAC1B;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA,EAAE,uEAAkB;AACpB,EAAE,8DAAS;AACX,EAAE,+DAAU;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wDAAkB;AAC1D,oCAAoC,wDAAkB;AACtD,GAAG;AACH,CAAC;;AAED;AACA,+DAAU;AACV;;;;;;;;;;;;;;;;;;;ACnF+C;AACT;AACgB;AAChB;;AAEtC;AACA;AACA;AACA;AACA,wBAAwB,oEAAM;AAC9B;AACA,oBAAoB,uDAAU;AAC9B;AACA,IAAI,+DAAkB;AACtB,IAAI,uDAAU;AACd;AACA;;AAEA,iEAAe,GAAG;;;;;;;;;;;;;;AClBlB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;ACRzB;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA,iEAAe,UAAU;;;;;;;;;;;;;;;;ACPsB;AACO;;AAEtD;AACA,oBAAoB,oEAAM;AAC1B;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA,EAAE,+DAAkB;AACpB;;AAEA,iEAAe,UAAU;;;;;;;;;;;;;;;;;;;;ACdsB;AACO;AAClB;AACE;;AAE/B;AACP,kCAAkC;AAClC;AACA;;AAEO;AACP,sBAAsB,oEAAM;AAC5B;AACA;AACA;AACA,EAAE,+DAAkB;AACpB,EAAE,sDAAS;AACX,EAAE,uDAAU;AACZ;;AAEO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxB+C;AACO;AAChB;AACF;;AAEpC;AACA;AACA,sBAAsB,oEAAM;AAC5B;AACA,EAAE,+DAAkB;AACpB,EAAE,sDAAS;AACX,EAAE,uDAAU;AACZ;;AAEA,iEAAe,QAAQ;;;;;;;;;;;;;;ACdvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;ACTyB;;AAE/C;AACA,sBAAsB,oEAAM;AAC5B;;AAEA,kBAAkB,wBAAwB;AAC1C,4BAA4B,qBAAqB;AACjD;AACA;AACA,sDAAsD,2BAA2B;AACjF;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;AClB1B;;AAEA;AACA;AACA;;AAEA,iEAAe,kBAAkB;;;;;;;;;;;;;;;;ACNc;AACO;;AAEtD;AACA;AACA,sBAAsB,oEAAM;AAC5B;AACA,EAAE,+DAAkB;AACpB;;AAEA,iEAAe,YAAY","sources":["webpack://webpack-boilerplate/./src/index.js","webpack://webpack-boilerplate/./src/modules/addTask.js","webpack://webpack-boilerplate/./src/modules/clearList.js","webpack://webpack-boilerplate/./src/modules/createTask.js","webpack://webpack-boilerplate/./src/modules/deleteTask.js","webpack://webpack-boilerplate/./src/modules/drag&drop.js","webpack://webpack-boilerplate/./src/modules/editTask.js","webpack://webpack-boilerplate/./src/modules/getDataFromLocalStorage.js","webpack://webpack-boilerplate/./src/modules/renderList.js","webpack://webpack-boilerplate/./src/modules/saveAtLocalStorage.js","webpack://webpack-boilerplate/./src/modules/updateStatus.js"],"sourcesContent":["// import './style.scss';\nimport Add from './modules/addTask';\nimport deleteTask from './modules/deleteTask';\nimport getArr from './modules/getDataFromLocalStorage';\nimport saveInLocalStorage from './modules/saveAtLocalStorage';\nimport clearList from './modules/clearList';\nimport renderList from './modules/renderList';\nimport editTask from './modules/editTask';\nimport updateStatus from './modules/updateStatus';\nimport * as dragNdrop from './modules/drag&drop';\n\n// ------------ EVENT LISTENERS ------------\n// TRAGET DOM ELEMENTS\nconst addTaskBtn = document.getElementById('add-task-btn');\nconst listPlaceholder = document.getElementById('list-placeholder');\nconst clearButton = document.getElementById('clear-btn');\n\naddTaskBtn.addEventListener('click', Add);\n\n// EDIT A TASK\nlistPlaceholder.addEventListener('click', (e) => {\n  if (e.target.tagName === 'INPUT' && e.target.classList.contains('task-text')) {\n    const taskDescription = e.target;\n    const index = taskDescription.parentElement.parentElement.id;\n    taskDescription.addEventListener('keydown', (e) => {\n      if (e.keyCode === 13 && taskDescription.value !== '') {\n        editTask(taskDescription.value, index);\n      }\n    });\n  }\n});\n\n// DELETE A TASK\n\nlistPlaceholder.addEventListener('click', (e) => {\n  if (e.target.className === 'fa-solid fa-trash-can') { // element clicked is the trash icon\n    // get the index of the button (same as the object Index: in the array)\n    const index = +e.target.parentElement.parentElement.id;\n    deleteTask(index);\n    clearList();\n    renderList();\n  }\n});\n\n// CHANGE STATUS OF CHECKBOX\nlistPlaceholder.addEventListener('click', (e) => {\n  if (e.target.tagName === 'INPUT' && e.target.classList.contains('checkbox')) {\n    const checkbox = e.target;\n    const taskText = checkbox.nextElementSibling;\n    taskText.classList.toggle('done');\n    const completed = checkbox.checked;\n    const index = checkbox.parentElement.parentElement.id;\n    updateStatus(index, completed);\n  }\n});\n\n// CLEAR ALL SELECTED ITEMS\nclearButton.addEventListener('click', () => {\n  let taskListArr = getArr();\n  taskListArr = taskListArr.filter((task) => task.Completed !== true);\n  for (let i = 0; i < taskListArr.length; i += 1) {\n    taskListArr[i].Index = i + 1;\n  }\n  saveInLocalStorage(taskListArr);\n  clearList();\n  renderList();\n});\n\n// DRAG AND DROP\nlistPlaceholder.addEventListener('dragstart', (e) => {\n  if (e.target.classList.contains('task-text')) {\n    const index = e.target.parentElement.parentElement.id;\n    localStorage.setItem('startDragIndex', JSON.stringify(index));\n  }\n  const dragTargetArr = [...listPlaceholder.getElementsByTagName('li')];\n  dragTargetArr.forEach((target) => {\n    target.addEventListener('dragover', dragNdrop.dragOver());\n    target.addEventListener('drop', dragNdrop.dragDrop());\n  });\n});\n\n// SHOW LIST ON HTML\nrenderList();\ndocument.getElementById('task-text').focus();\n","import getArr from './getDataFromLocalStorage';\nimport createTask from './createTask';\nimport saveInLocalStorage from './saveAtLocalStorage';\nimport renderList from './renderList';\n\n// ADD A TASK\nconst Add = () => {\n  const addTaskDescInput = document.getElementById('task-text').value;\n  if (addTaskDescInput !== '') {\n    const taskListArr = getArr();\n    const index = (taskListArr.length + 1);\n    const newTask = createTask(addTaskDescInput, index);\n    taskListArr.push(newTask);\n    saveInLocalStorage(taskListArr);\n    renderList();\n  }\n};\n\nexport default Add;","// CLEAR ALL TASKS ON HTML --------\nconst clearList = () => {\n  const listPlaceholder = document.getElementById('list-placeholder');\n  while (listPlaceholder.firstChild) {\n    listPlaceholder.removeChild(listPlaceholder.firstChild);\n  }\n};\n\nexport default clearList;\n","// ADD NEW TASK --------\n\nconst createTask = (str, num) => {\n  const newtask = { Description: str, Completed: false, Index: num };\n  return newtask;\n};\n\nexport default createTask;","import getArr from './getDataFromLocalStorage';\nimport saveInLocalStorage from './saveAtLocalStorage';\n\nconst deleteTask = (index) => {\n  let taskListArr = getArr();\n  // remove the item on the array based on the index\n  taskListArr = taskListArr.filter((task) => task.Index !== index);\n  // update the indexes of each element in the array\n  for (let i = 0; i < taskListArr.length; i += 1) {\n    taskListArr[i].Index = i + 1;\n  }\n  saveInLocalStorage(taskListArr);\n};\n\nexport default deleteTask;","import getArr from './getDataFromLocalStorage';\nimport saveInLocalStorage from './saveAtLocalStorage';\nimport clearList from './clearList';\nimport renderList from './renderList';\n\nexport function dragOver(e) {\n  this.classList.add('drag-over');// add style margin-top: 40px;\n  e.preventDefault();\n}\n\nexport function swapItems(fromIndex, toIndex) {\n  const taskListArr = getArr();\n  taskListArr[fromIndex - 1].Index = toIndex;\n  taskListArr[toIndex - 1].Index = fromIndex;\n  taskListArr.sort((a, b) => a.Index - b.Index);\n  saveInLocalStorage(taskListArr);\n  clearList();\n  renderList();\n}\n\nexport function dragDrop() {\n  const dragEndIndex = this.id;\n  const dragStartIndex = JSON.parse(localStorage.getItem('startDragIndex'));\n  swapItems(dragStartIndex, dragEndIndex);\n}\n","import getArr from './getDataFromLocalStorage';\nimport saveInLocalStorage from './saveAtLocalStorage';\nimport renderList from './renderList';\nimport clearList from './clearList';\n\n// EDIT A TASK --------\nconst editTask = (str, num) => {\n  const taskListArr = getArr();\n  taskListArr[num - 1].Description = str;\n  saveInLocalStorage(taskListArr);\n  clearList();\n  renderList();\n};\n\nexport default editTask;","// GET ARRAY FROM LOCAL STORAGE --------\nconst getArr = () => {\n  let arr = JSON.parse(localStorage.getItem('taskListArr'));\n  if (arr === null) {\n    arr = [];\n  }\n  return arr;\n};\n\nexport default getArr;\n","import getArr from './getDataFromLocalStorage';\n\nconst renderList = () => {\n  const taskListArr = getArr();\n  const listPlaceholder = document.getElementById('list-placeholder');\n\n  for (let i = 0; i < taskListArr.length; i += 1) {\n    const task = `<li id=\"${taskListArr[i].Index}\" class=\"task\">\n      <div class=\"task-info\">\n        <input class=\"checkbox\" type=\"checkbox\">\n        <input class=\"task-text\" type=\"text\" value=\"${taskListArr[i].Description}\" draggable=\"true\"></input>\n      </div>\n      <button \"class=\"delete-btn\"><i class=\"fa-solid fa-trash-can\"></i></i></button>\n    </li>`;\n    listPlaceholder.innerHTML += task;\n  }\n};\n\nexport default renderList;\n","// SAVE ARRAY AS STRING TO LOCAL STORAGE --------\n\nconst saveInLocalStorage = (arr) => {\n  localStorage.setItem('taskListArr', JSON.stringify(arr));\n};\n\nexport default saveInLocalStorage;","import getArr from './getDataFromLocalStorage';\nimport saveInLocalStorage from './saveAtLocalStorage';\n\n// EDIT A TASK --------\nconst updateStatus = (num, completed) => {\n  const taskListArr = getArr();\n  taskListArr[num - 1].Completed = completed;\n  saveInLocalStorage(taskListArr);\n};\n\nexport default updateStatus;"],"names":[],"sourceRoot":""}